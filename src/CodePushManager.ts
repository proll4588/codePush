import { NativeModules, Platform } from 'react-native';
import {
  CodePushManagerInterface,
  CodePushUpdate,
  CodePushDownloadResult,
  CodePushVersionInfo,
  CodePushConstants,
  CodePushSyncResult,
  CodePushSyncStatus,
} from './types';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
interface CodePushNativeModule extends CodePushManagerInterface {
  getConstants(): CodePushConstants;
  checkForUpdate(): Promise<CodePushUpdate>;
  downloadUpdate(): Promise<CodePushDownloadResult>;
  getCurrentVersion(): Promise<CodePushVersionInfo>;
  getBundlePath(): Promise<string | null>;
  clearUpdates(): Promise<CodePushDownloadResult>;
  getAppVersion(): Promise<string>;
}

// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
const { CodePushManager } = NativeModules;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
export const isNativeModuleAvailable = CodePushManager != null;

// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–¥—É–ª–µ
console.log('üîç CodePush: NativeModules:', Object.keys(NativeModules));
console.log('üîç CodePush: CodePushManager:', CodePushManager);
console.log('üîç CodePush: isNativeModuleAvailable:', isNativeModuleAvailable);

// Fallback —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
class CodePushManagerFallback implements CodePushManagerInterface {
  getConstants(): CodePushConstants {
    return {
      serverURL: 'http://192.168.0.160:3000',
      codePushPath: '/tmp/CodePush',
    };
  }

  async getAppVersion(): Promise<string> {
    console.warn('CodePush: –ù–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, getAppVersion fallback');
    return '0.0.0'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
  }

  async checkForUpdate(): Promise<CodePushUpdate> {
    console.warn(
      'üîç CodePush: –ù–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback',
    );

    try {
      const appVersion = await this.getAppVersion();
      const url =
        `http://192.168.0.160:3000/api/check-update?appVersion=${appVersion}&platform=${Platform.OS}`;
      console.log('CodePush: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞:', url);

      // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ fetch
      const response = await fetch(url);

      console.log(
        'CodePush: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:',
        response.status,
        response.statusText,
      );

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('CodePush: Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', data);
      return data;
    } catch (error) {
      console.error('CodePush: –û—à–∏–±–∫–∞ fallback –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
      return {
        hasUpdate: false,
        message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${error.message}`,
      };
    }
  }

  async downloadUpdate(): Promise<CodePushDownloadResult> {
    console.warn('CodePush: –ù–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
    return {
      success: false,
      message: '–ù–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å CodePush –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
    };
  }

  async getCurrentVersion(): Promise<CodePushVersionInfo> {
    return {
      version: '0',
      hasUpdate: false,
    };
  }

  async getBundlePath(): Promise<string | null> {
    return null;
  }

  async clearUpdates(): Promise<CodePushDownloadResult> {
    return {
      success: false,
      message: '–ù–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å CodePush –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
    };
  }

  applyUpdate(): void {
    console.warn(
      'CodePush: –ù–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, applyUpdate fallback',
    );
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const codePushManager: CodePushManagerInterface = isNativeModuleAvailable
  ? (CodePushManager as CodePushNativeModule)
  : new CodePushManagerFallback();

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å CodePush
export class CodePush {
  private static instance: CodePush;
  private manager: CodePushManagerInterface;

  private constructor() {
    this.manager = codePushManager;
  }

  public static getInstance(): CodePush {
    if (!CodePush.instance) {
      CodePush.instance = new CodePush();
    }
    return CodePush.instance;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  public getConstants(): CodePushConstants {
    return this.manager.getConstants();
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  public async checkForUpdate(): Promise<CodePushUpdate> {
    try {
      console.log('üîç CodePush: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
      const result = await this.manager.checkForUpdate();
      console.log('üîç CodePush: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', result);
      return result;
    } catch (error) {
      console.error('üîç CodePush: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
      return {
        hasUpdate: false,
        message: `–û—à–∏–±–∫–∞: ${error}`,
      };
    }
  }

  // –°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  public async downloadUpdate(): Promise<CodePushDownloadResult> {
    try {
      console.log('CodePush: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
      const result = await this.manager.downloadUpdate();
      console.log('CodePush: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:', result);
      return result;
    } catch (error) {
      console.error('CodePush: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞: ${error}`,
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
  public async getCurrentVersion(): Promise<CodePushVersionInfo> {
    try {
      const result = await this.manager.getCurrentVersion();
      console.log('CodePush: –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:', result);
      return result;
    } catch (error) {
      console.error('CodePush: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏:', error);
      return {
        version: '0',
        hasUpdate: false,
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ bundle
  public async getBundlePath(): Promise<string | null> {
    try {
      const result = await this.manager.getBundlePath();
      console.log('CodePush: –ü—É—Ç—å –∫ bundle:', result);
      return result;
    } catch (error) {
      console.error('CodePush: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏ –∫ bundle:', error);
      return null;
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  public async clearUpdates(): Promise<CodePushDownloadResult> {
    try {
      console.log('CodePush: –û—á–∏—Å—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
      const result = await this.manager.clearUpdates();
      console.log('CodePush: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:', result);
      return result;
    } catch (error) {
      console.error('CodePush: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞: ${error}`,
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  public async getAppVersion(): Promise<string> {
    try {
      const version = await this.manager.getAppVersion();
      console.log('CodePush: –ù–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', version);
      return version;
    } catch (error) {
      console.error('CodePush: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏:', error);
      return 'unknown';
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  public async sync(): Promise<CodePushSyncResult> {
    try {
      console.log('CodePush: –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
      const updateInfo = await this.checkForUpdate();

      if (updateInfo.hasUpdate) {
        console.log('CodePush: –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...');
        const downloadResult = await this.downloadUpdate();

        if (downloadResult.success) {
          console.log('CodePush: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!');
          return {
            status: CodePushSyncStatus.UPDATE_DOWNLOADED,
            message: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${downloadResult.version} –∑–∞–≥—Ä—É–∂–µ–Ω–æ.`,
          };
        } else {
          console.error(
            'CodePush: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:',
            downloadResult.message,
          );
          return {
            status: CodePushSyncStatus.ERROR,
            message: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${downloadResult.message}`,
          };
        }
      } else {
        console.log('CodePush: –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return {
          status: CodePushSyncStatus.UP_TO_DATE,
          message: updateInfo.message || '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.',
        };
      }
    } catch (error) {
      console.error('CodePush: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      return {
        status: CodePushSyncStatus.ERROR,
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`,
      };
    }
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  public applyUpdate(): void {
    if (!isNativeModuleAvailable) {
      console.warn('CodePush: –ù–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, applyUpdate –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω');
      return;
    }
    console.log('CodePush: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –±–∞–Ω–¥–ª–∞...');
    this.manager.applyUpdate();
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
  public isNativeModuleAvailable(): boolean {
    return isNativeModuleAvailable;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
  public getPlatformInfo(): { platform: string; isNative: boolean } {
    return {
      platform: Platform.OS,
      isNative: isNativeModuleAvailable,
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export default CodePush.getInstance();
