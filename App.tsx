/**
 * Code Push Test App
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Code Push
 *
 * @format
 */

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ScrollView,
  StatusBar,
  useColorScheme,
} from 'react-native';
import {
  SafeAreaProvider,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';
import { Logger, CodePush } from './src';

function App() {
  const isDarkMode = useColorScheme() === 'dark';

  return (
    <SafeAreaProvider>
      <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
      <AppContent />
    </SafeAreaProvider>
  );
}

function AppContent() {
  const safeAreaInsets = useSafeAreaInsets();
  const [currentVersion, setCurrentVersion] = useState<any>(null);
  const [appVersion, setAppVersion] = useState<string | null>(null);
  const [platformInfo, setPlatformInfo] = useState<any>(null);

  useEffect(() => {
    initializeCodePush();
  }, []);

  const initializeCodePush = async () => {
    try {
      console.log('üîç App: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Code Push...');
      Logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Code Push...');

      const platform = CodePush.getPlatformInfo();
      setPlatformInfo(platform);

      const nativeVersion = await CodePush.getAppVersion();
      setAppVersion(nativeVersion);

      const bundleVersion = await CodePush.getCurrentVersion();
      setCurrentVersion(bundleVersion);

      Logger.success('Code Push –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    } catch (error) {
      console.error('üîç App: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      Logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
  };

  const handleClearUpdates = async () => {
    Alert.alert(
      '–û—á–∏—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–£–¥–∞–ª–∏—Ç—å',
          style: 'destructive',
          onPress: async () => {
            try {
              const result = await CodePush.clearUpdates();
              if (result.success) {
                Alert.alert(
                  '–£—Å–ø–µ—à–Ω–æ',
                  `${result.message}. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏.`,
                );
                setCurrentVersion(await CodePush.getCurrentVersion());
              } else {
                Alert.alert('–û—à–∏–±–∫–∞', result.message);
              }
            } catch (error) {
              Alert.alert('–û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: ${error}`);
            }
          },
        },
      ],
    );
  };

  const handleGetBundlePath = async () => {
    try {
      const path = await CodePush.getBundlePath();
      Alert.alert(
        '–ü—É—Ç—å –∫ bundle',
        path
          ? `Bundle –Ω–∞–π–¥–µ–Ω:\n${path}`
          : 'Bundle –Ω–µ –Ω–∞–π–¥–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)',
      );
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏: ${error}`);
    }
  };

  return (
    <ScrollView style={[styles.container, { paddingTop: safeAreaInsets.top }]}>
      <View style={styles.content}>
        <Text style={styles.title}>Code Push Test v9</Text>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</Text>
          <Text style={styles.infoText}>
            –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platformInfo?.platform || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
          </Text>
          <Text style={styles.infoText}>
            –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {appVersion || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
          </Text>
          <Text style={styles.infoText}>
            –ù–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å:{' '}
            {platformInfo?.isNative ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
          </Text>
        </View>

        {/* –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–∞–Ω–¥–ª–∞</Text>
          <Text style={styles.infoText}>
            –í–µ—Ä—Å–∏—è: {currentVersion?.version || '–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è'}
          </Text>
          <Text style={styles.infoText}>
            –ó–∞–≥—Ä—É–∂–µ–Ω: {currentVersion?.hasUpdate ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}
          </Text>
        </View>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</Text>

          <TouchableOpacity style={styles.button} onPress={handleGetBundlePath}>
            <Text style={styles.buttonText}>–ü—É—Ç—å –∫ bundle</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.button, styles.buttonDanger]}
            onPress={handleClearUpdates}
          >
            <Text style={[styles.buttonText, styles.buttonTextDanger]}>
              –û—á–∏—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            </Text>
          </TouchableOpacity>
        </View>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</Text>
          <Text style={styles.instructionText}>
            1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: cd server && npm start{String.fromCharCode(10)}
            2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π bundle –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ API.
            {String.fromCharCode(10)}3. –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–Ω–µ
            —á–µ—Ä–µ–∑ hot reload).{String.fromCharCode(10)}4. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∂–µ—Ç
            —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ —Å–∫–∞—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Å
            –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π –±–∞–Ω–¥–ª–∞.
          </Text>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  content: {
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 30,
    color: '#333',
  },
  section: {
    backgroundColor: 'white',
    padding: 15,
    marginBottom: 15,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#333',
  },
  infoText: {
    fontSize: 14,
    marginBottom: 5,
    color: '#666',
  },
  instructionText: {
    fontSize: 12,
    color: '#888',
    lineHeight: 18,
  },
  button: {
    backgroundColor: '#007AFF',
    padding: 15,
    borderRadius: 8,
    marginBottom: 10,
    alignItems: 'center',
  },
  buttonSecondary: {
    backgroundColor: '#34C759',
  },
  buttonDanger: {
    backgroundColor: '#FF3B30',
  },
  buttonDisabled: {
    backgroundColor: '#ccc',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  buttonTextSecondary: {
    color: 'white',
  },
  buttonTextDanger: {
    color: 'white',
  },
});

export default App;
